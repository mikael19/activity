name: Activity

on: 
  push:
    branches: 
      - dev
      - master
      - staging
  pull_request:
    branches: 
      - dev
      - master
      - staging

jobs:
  Build_and_test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python 3.7
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - name: Install dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install gdal-bin
        python -m pip install --upgrade pip
        pip install pipenv
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run Tests
      env: 
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: |
        pipenv install
        source $(python3 -m pipenv --venv)/bin/activate
        coverage run manage.py test
        echo "++++++++ Show test coverage report +++++++"
        coverage report
        echo "----------- Upload test coverage ---------"
        bash <(curl -s https://codecov.io/bash)

  Infrastructure:
    runs-on: ubuntu-latest 
    needs: Build_and_test
    steps:
    - uses: actions/checkout@v1
    - name: Setup terraform
      run: |
        export VER="0.12.21"
        wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
        unzip terraform_${VER}_linux_amd64.zip
        sudo mv terraform /usr/local/bin/
        terraform version

    - name: Run infrastructure script
      env: 
        BACKEND_BUCKET_DEV_ENV: ${{ secrets.BACKEND_BUCKET_DEV_ENV }}
        STATE_FILE_DEV_ENV: ${{ secrets.STATE_FILE_DEV_ENV }}
        SPACES_ACCESS_KEY: ${{ secrets.SPACES_ACCESS_KEY }}
        SPACES_SECRET_KEY: ${{ secrets.SPACES_SECRET_KEY }}
        CLUSTER_NAME_DEV_ENV: ${{ secrets.CLUSTER_NAME_DEV_ENV }}
        CLUSTER_REGION: ${{ secrets.CLUSTER_REGION }}
        K8S_VERSION: ${{ secrets.K8S_VERSION }}
        NODE_TYPE: ${{ secrets.NODE_TYPE }}
        MAX_NODE_NUM: ${{ secrets.MAX_NODE_NUM }}
        MIN_NODE_NUM: ${{ secrets.MIN_NODE_NUM }}
        SERVICE_ACCESS_TOKEN: ${{ secrets.SERVICE_ACCESS_TOKEN }}
        DB_SIZE: ${{ secrets.DB_SIZE }}
        PG_VERSION: ${{ secrets.PG_VERSION }}
        DB_NAME_DEV_ENV: ${{ secrets.DB_NAME_DEV_ENV }}
        # staging vars, some are reused from dev_env
        BACKEND_BUCKET_STAGING: ${{ secrets.BACKEND_BUCKET_STAGING }}
        STATE_FILE_STAGING: ${{ secrets.STATE_FILE_STAGING }}
        CLUSTER_NAME_STAGING: ${{ secrets.CLUSTER_NAME_STAGING }}
        K8S_VERSION_STAGING: ${{ secrets.K8S_VERSION_STAGING }}
        DB_NAME_STAGING: ${{ secrets.DB_NAME_STAGING }}

      run: |
        export TRAVIS_EVENT_TYPE="push"
        chmod +x ci-scripts/create_infrastructure.sh
        bash ./ci-scripts/create_infrastructure.sh

  Build_and_push_image:
    runs-on: ubuntu-latest 
    needs: Infrastructure
    steps:
    - uses: actions/checkout@v1 
    - name: Setup docker-ce
      run: |
        sudo apt install apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
        sudo apt install docker-ce
        sudo docker version
  
    - name: Build and Push
      env:
        DOCKER_HUB_USERNM: ${{ secrets.DOCKER_HUB_USERNM }}
        DOCKER_HUB_PASSWD: ${{ secrets.DOCKER_HUB_PASSWD }}
        ACTIVITY_CE_DB_NAME_DEV: ${{ secrets.ACTIVITY_CE_DB_NAME_DEV }}
        ACTIVITY_CE_DB_USER_DEV: ${{ secrets.ACTIVITY_CE_DB_USER_DEV }}
        ACTIVITY_CE_DB_PASSWORD_DEV: ${{ secrets.ACTIVITY_CE_DB_PASSWORD_DEV }}
        ACTIVITY_CE_DB_HOST_DEV: ${{ secrets.ACTIVITY_CE_DB_HOST_DEV }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        DEBUG: ${{ secrets.DEBUG }}
        DJANGO_ALLOWED_HOSTS: ${{ secrets.DJANGO_ALLOWED_HOSTS }}
        DB_ENGINE: ${{ secrets.DB_ENGINE }}
        ACTIVITY_CE_DB_PORT_DEV: ${{ secrets.ACTIVITY_CE_DB_PORT_DEV }}
        APPLICATION_ENV: ${{ secrets.APPLICATION_ENV }}
        EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
        EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
        EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
        GOOGLE_MAP_API_KEY: ${{ secrets.GOOGLE_MAP_API_KEY }}
        APPLICATION_NAME: ${{ secrets.APPLICATION_NAME }}
        REGISTRY_OWNER: ${{ secrets.REGISTRY_OWNER }}
        # staging variables. others are reused from dev
        ACTIVITY_CE_DB_NAME_STAGING: ${{ secrets.ACTIVITY_CE_DB_NAME_STAGING }}
        APPLICATION_ENV_STAGING: ${{ secrets.APPLICATION_ENV_STAGING }}

      run: |
        export TRAVIS_COMMIT=$GITHUB_SHA
        export TRAVIS_EVENT_TYPE="push"
        chmod +x ci-scripts/build_docker_image.sh
        bash ./ci-scripts/build_docker_image.sh


  Deploy:
    needs: Build_and_push_image
    runs-on: ubuntu-latest
    container:
      image: yagami22/ci-deploy-image 
    steps:
    - uses: actions/checkout@v1
    - name: Deploy to DO
      env:
        APPLICATION_ENV: ${{ secrets.APPLICATION_ENV }}
        CLUSTER_NAME_DEV_ENV: ${{ secrets.CLUSTER_NAME_DEV_ENV }}
        SERVICE_ACCESS_TOKEN: ${{ secrets.SERVICE_ACCESS_TOKEN }}
        DOCKER_HUB_USERNM: ${{ secrets.DOCKER_HUB_USERNM }}
        DOCKER_HUB_PASSWD: ${{ secrets.DOCKER_HUB_PASSWD }}
        B64_TOKEN: ${{ secrets.B64_TOKEN }}
        DEFAULT_NOTIFY: ${{ secrets.DEFAULT_NOTIFY }}
        RATE_LIMIT: ${{ secrets.RATE_LIMIT }}
        HOST_DOMAIN: ${{ secrets.HOST_DOMAIN }}
        APPLICATION_NAME: ${{ secrets.APPLICATION_NAME }}
        REGISTRY_OWNER: ${{ secrets.REGISTRY_OWNER }}
        # staging variables
        CLUSTER_NAME_STAGING: ${{ secrets.CLUSTER_NAME_STAGING }}
        HOST_DOMAIN_STAGING: ${{ secrets.HOST_DOMAIN_STAGING }}
        APPLICATION_ENV_STAGING: ${{ secrets.APPLICATION_ENV_STAGING }}
        SLACK_CHANNEL_HOOK: ${{ secrets.SLACK_CHANNEL_HOOK }}
      run: |
        export TRAVIS_COMMIT=$GITHUB_SHA
        export FILE_PATH="/github/home/.docker/config.json"
        export TRAVIS_EVENT_TYPE="push"
        chmod +x ci-scripts/deployment.sh
        bash ./ci-scripts/deployment.sh
        if [[ $? -eq 0 ]]; then
            export DEPLOY="success"
        else
            export DEPLOY="fail"
        fi
        export EMOJI=":github:"
        export TRAVIS_COMMIT_MESSAGE="No Commit message"
        chmod +x ci-scripts/notify_slack.sh
        bash ./ci-scripts/notify_slack.sh
